{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["StyledLink","styled","FadeLink","withConfig","displayName","componentId","Title","h3","rhythm","ItemWrapper","div","AllTagWrapper","ul","SelectedTagWrapper","TagLi","li","BlogIndex","props","_this","_PureComponent","call","this","state","selectedTag","onSelectTag","tag","setState","onRemoveTag","renderAllTags","nodes","_this2","tagElements","map","node","frontmatter","tags","reduce","acc","index","arr","concat","filter","pos","self","indexOf","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","key","_components_tag_box__WEBPACK_IMPORTED_MODULE_11__","name","onClick","_components_clearfix__WEBPACK_IMPORTED_MODULE_12__","renderSelectedTag","_this3","closable","renderPosts","length","fields","slug","excerpt","title","to","date","dangerouslySetInnerHTML","__html","description","renderWithData","data","location","siteTitle","site","siteMetadata","allMarkdownRemark","edges","edge","_components_layout__WEBPACK_IMPORTED_MODULE_6__","_components_seo__WEBPACK_IMPORTED_MODULE_8__","keywords","_components_bio__WEBPACK_IMPORTED_MODULE_4__","_components_nav__WEBPACK_IMPORTED_MODULE_5__","render","_this4","gatsby__WEBPACK_IMPORTED_MODULE_1__","query","_public_static_d_3537006534_json__WEBPACK_IMPORTED_MODULE_0__","PureComponent"],"mappings":"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","file":"component---src-pages-index-tsx-bb2505e16f4af62e5f47.js","sourcesContent":["import { graphql, PageRendererProps, StaticQuery } from \"gatsby\"\nimport React, { PureComponent } from \"react\"\nimport styled from \"styled-components\"\nimport { Bio } from \"../components/bio\"\nimport Nav from \"../components/nav\"\nimport { Layout } from \"../components/layout\"\nimport { FadeLink } from \"../components/link\"\nimport { SEO } from \"../components/seo\"\nimport { MarkdownRemark } from \"../graphql-types\"\nimport { rhythm } from \"../utils/typography\"\nimport keywords from \"../data/seo-keywords\"\nimport TagBox from \"../components/tag-box\"\nimport Clearfix from \"../components/clearfix\"\n\nconst StyledLink = styled(FadeLink)`\n  box-shadow: none;\n`\n\nconst Title = styled.h3`\n  margin-bottom: ${rhythm(1 / 4)};\n`\n\nconst ItemWrapper = styled.div`\n  margin: 60px 0;\n`\n\nconst AllTagWrapper = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 20px 0;\n`\n\nconst SelectedTagWrapper = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 20px 0;\n`\n\nconst TagLi = styled.li`\n  list-style: none;\n  float: left;\n  padding: 0;\n  margin: 0;\n`\n\ntype Props = PageRendererProps\n\ninterface State {\n  selectedTag: string | null\n}\n\nexport default class BlogIndex extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      selectedTag: null,\n    }\n  }\n\n  onSelectTag(tag: string) {\n    this.setState({ selectedTag: tag })\n  }\n\n  onRemoveTag(tag: string) {\n    this.setState({ selectedTag: null })\n  }\n\n  renderAllTags(nodes: any[]) {\n    const tagElements = nodes\n      // extract tags\n      .map((node: MarkdownRemark) => node.frontmatter!.tags!)\n      // flatten\n      .reduce((acc: string[], tags: string[], index, arr) => {\n        acc = acc.concat(tags)\n        return acc\n      }, [])\n      // remove deuplicate\n      .filter((tag, pos, self) => self.indexOf(tag) == pos)\n      // render\n      .map((tag) => (\n        <TagLi key={tag}>\n          <TagBox name={tag} onClick={() => this.onSelectTag(tag)} />\n        </TagLi>\n      ))\n\n    return (\n      <Clearfix>\n        <AllTagWrapper>\n          {tagElements}\n        </AllTagWrapper>\n      </Clearfix>\n    )\n  }\n  \n  renderSelectedTag() {\n    const { selectedTag } = this.state\n    if (selectedTag == null) {\n      return null\n    }\n\n    return (\n      <Clearfix>\n        <SelectedTagWrapper>\n          <TagLi>\n            <small>filtered: </small>\n            <TagBox\n              name={selectedTag}\n              onClick={() => this.onRemoveTag(selectedTag)}\n              closable={true} />\n          </TagLi>\n        </SelectedTagWrapper>\n      </Clearfix>\n    )\n  }\n\n  renderPosts(nodes: any[]) {\n    const { selectedTag } = this.state\n\n    return nodes\n      .filter((node: MarkdownRemark) => (\n        selectedTag == null ?\n          true :\n          node.frontmatter!.tags!.filter(tag => selectedTag === tag).length > 0\n      ))\n      .map((node: MarkdownRemark) => {\n        const frontmatter = node!.frontmatter!\n        const fields = node!.fields!\n        const slug = fields.slug!\n        const excerpt = node!.excerpt!\n\n        const title = frontmatter.title || fields.slug\n        return (\n          <ItemWrapper key={slug}>\n            <Title>\n              <StyledLink to={slug}>{title}</StyledLink>\n            </Title>\n            <small>{frontmatter.date}</small>\n            <p>\n              {frontmatter.tags!.map(tag =>\n                <TagBox key={tag} name={tag} />\n              )}\n            </p>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: frontmatter.description || excerpt,\n              }}\n            />\n          </ItemWrapper>\n        )\n      })\n  }\n\n  renderWithData(data: any) {\n    const { location } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const nodes = data.allMarkdownRemark.edges.map((edge: any) => edge.node)\n\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO\n          title=\"All posts\"\n          keywords={keywords}\n        />\n        <Bio />\n        <Nav />\n        {this.renderAllTags(nodes)}\n        {this.renderSelectedTag()}\n        {this.renderPosts(nodes)}\n      </Layout>\n    )\n  }\n\n  render() {\n    return (\n      <StaticQuery\n        query={graphql`\n          query {\n            site {\n              siteMetadata {\n                title\n              }\n            }\n            allMarkdownRemark(\n              sort: { fields: [frontmatter___date], order: DESC },\n              filter: { frontmatter: { template: { eq: \"blog\" }}}\n            ) {\n              edges {\n                node {\n                  excerpt\n                  fields {\n                    slug\n                  }\n                  frontmatter {\n                    date(formatString: \"MMMM DD, YYYY\")\n                    title\n                    description\n                    tags\n                  }\n                }\n              }\n            }\n          }\n        `}\n        render={(data) => this.renderWithData(data)}\n      />\n    )\n  }\n}\n"],"sourceRoot":""}