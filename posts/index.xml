<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hello, There</title>
    <link>http://jaeyo.github.io/posts/</link>
    <description>Recent content in Posts on Hello, There</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Thu, 21 Apr 2022 10:40:55 +0000</lastBuildDate><atom:link href="http://jaeyo.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> 네이버 클라우드 입사 8개월차 회고</title>
      <link>http://jaeyo.github.io/8th-month-after-joining-naver-cloud/</link>
      <pubDate>Thu, 21 Apr 2022 10:40:55 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/8th-month-after-joining-naver-cloud/</guid>
      <description>작년 8월 말에 현재의 회사, 네이버 클라우드로 이직해왔다. 학교 다닐 적에는 전학 한 번 없이 스트레이트로 졸업까지 했건만, 직장인이 된 이후로는 어쩌다보니 이직을 꽤 자주 하고 있다.
매번 이렇게 다른 회사, 다른 포지션으로의 변화를 겪다보니 이직이 마치 여행과 같다는 생각을 하기도 한다. 익숙한 동네와 사람들을 떠나 새로운 곳에서 새로운 문화와 만나는 여정과 같으니 말이다. 밖에서 볼때는 어차피 똑같은 IT 회사에 똑같은 개발자로의 이직이니 다 비슷비슷하지 않겠느냐 하고 볼 수도 있겠지만, 실제로는 매번 이직 때마다 너무 다른 경험들을 하게 된다.</description>
    </item>
    
    <item>
      <title>길 잃은 노인을 만났다.</title>
      <link>http://jaeyo.github.io/met-a-lost-old-man/</link>
      <pubDate>Fri, 18 Feb 2022 00:31:01 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/met-a-lost-old-man/</guid>
      <description>며칠 전의 일이다.
아파트 상가의 한 편의점에서 친구를 기다리는데 한 노인분이 들어오셔서 갑자기 말을 걸었다.
&amp;ldquo;109동이 어딥니까?&amp;rdquo;
처음에는 부정확한 발음 때문에 몇 번을 되물었다. 하지만 곧 노인께서 찾으시는 게 아파트 단지 내 109동이란 걸 확인한 후에 지도 앱을 켜서 위치를 안내해드렸다. 하지만 그러고도 한참을 가만히 계시다가 다시 &amp;ldquo;109동이 어딥니까?&amp;rdquo; 하고 물으셨다. 좀 더 자세히 설명드려야 하나 싶어 고민하는데 한 마디를 덧붙이셨다.
&amp;ldquo;109동이 우리 집인데 어딘지를 기억이 나질 않아요.&amp;rdquo;
심장이 덜컹하고 떨어지는 기분이었다.</description>
    </item>
    
    <item>
      <title>Rust 사용 소감</title>
      <link>http://jaeyo.github.io/thoughts-about-rust/</link>
      <pubDate>Tue, 08 Feb 2022 00:31:01 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/thoughts-about-rust/</guid>
      <description>몇 년 전엔가, Rust 를 배워볼까 생각을 해본 적이 있었다. Java 를 메인으로 쓰던 때였다. 그 즈음에 Go 언어를 새로이 배워 이것저것 만들어보곤 했는데, Java 를 사용하면서 느꼈던 아쉬움들이 많은 부분 해소가 되어 Go 언어에 꽤 깊이 빠져있었다. 그와 동시에 매번 Go 언어와 붙어서 비교가 되곤 하는 Rust 에 대한 호기심이 들었다. GC 도 없다고 하니 좀 더 퍼포먼스 크리티컬한 걸 짤 때 더 효과적이지 않을까 하는 기대를 가지고 있었다.</description>
    </item>
    
    <item>
      <title>아이에게는 부모가 세상의 전부다</title>
      <link>http://jaeyo.github.io/parents-are-everything-to-a-child/</link>
      <pubDate>Wed, 08 Dec 2021 16:25:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/parents-are-everything-to-a-child/</guid>
      <description>&amp;ldquo;아이에게는 부모가 세상의 전부&amp;rdquo; 라는 말이 요즘 종종 머리에 맴돈다. 아이가 와서는 팔을 잡아당기며 놀아달라고 할 때 라던가 원하는 바를 얻지 못해 큰 소리로 울 때. 내가 조금 피곤하다거나 귀찮다는 이유로 아이에게 소홀히 대하지는 않았나 하는 반성을 하기도 한다. 아이는 음식도 부모가 주는 것만 먹을 수 있고, 놀이도 부모가 마련해 준 울타리 안에서만 놀 수 있다. 새로운 세상을 발견하고, 새로운 친구를 만나는 일 모두가 부모를 통해서만이 가능하다. 내가 더 부지런하면 아이는 새롭고 즐거운 경험들을 더 할 수 있는 셈이다.</description>
    </item>
    
    <item>
      <title>생일</title>
      <link>http://jaeyo.github.io/birthday/</link>
      <pubDate>Wed, 30 Jun 2021 10:41:00 +0900</pubDate>
      
      <guid>http://jaeyo.github.io/birthday/</guid>
      <description>유난히 마음이 시끄러운 날이 있다. 바로 오늘 같은 날이다. 버겁기 그지없는 회사일에 파묻혀서 허우적 대기를 한참, 문득 시계를 보니 어느새 자정이다. 아무도 없는 사무실의 불을 끄고 터벅거리며 나온다. 채 끝내지 못한 회사일이 앵앵 거리는 모기 소리마냥 머리 속을 헤맨다. 관자놀이를 슬쩍 문질러보았으나 영 신통치않다. 선릉역 사거리에서 운 좋게 빈 택시와 조우한다. 도착지를 전하는 내 목소리에 얼마간의 피로함이 묻은 탓일까, 택시기사님은 별 다른 말없이 악셀을 밟는다. 말라 비틀어진 무말랭이 같은 모양새를 하고는 뒷좌석에 몸을 푹 파묻는다.</description>
    </item>
    
    <item>
      <title>좋은 곳에서 좋은 사람을 만나는 일</title>
      <link>http://jaeyo.github.io/meeting-good-people-at-good-place/</link>
      <pubDate>Fri, 25 Jun 2021 12:00:01 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/meeting-good-people-at-good-place/</guid>
      <description>누군가의 페이스북에서 본 글이 감명깊어 갈무리 겸 남겨놓는다.
 좋은 학교, 좋은 회사에 가라고 이야기하는 이유는 좋을 구루를 만나기 위해서 입니다. 좋은 곳에 좋은 구루가 있으니까요. Quantum Leap 은 물리학, 회사의 성장에만 존재하는 것이 아닙니다. 사람에게도 존재합니다. Quantum Leap 을 만들기 위해서는 지속적으로 노력하는 것도 중요하지만, 생각을 많이 하고 사람을 많이 만나는 것도 중요합니다. 저도 계속 소모되는 곳에 있어서 지치지만 시간이 되면 구루라고 생각하는 사람을 만나려고 노력합니다. 그런 사람을 만나면 대충 10분만 만나도 1년을 살 수 있습니다.</description>
    </item>
    
    <item>
      <title>내가 매기는 나의 가치</title>
      <link>http://jaeyo.github.io/the-value-that-i-value/</link>
      <pubDate>Thu, 25 Mar 2021 13:31:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/the-value-that-i-value/</guid>
      <description>유튜브에서 희열의 순간 이라는 프로그램을 봤다. 유시민이 나오는 편이었는데 재미있는 내용들이 꽤 있었다. 가장 인상깊은 부분은 &amp;ldquo;남이 내게 어떤 꼬리표를 달아주는지에 대해 신경을 쓸 게 아니라 내가 인생에서 어떠한 의미를 부여할 것인가가 중요하다&amp;quot;는 부분이었다. 정말 당연한 내용이지만 평소에 쉽게 잊어버리고 마는 내용이다. 자연스럽게 다른 사람들과 비교하며 연봉으로 줄 세우기를 하고, 회사의 네임밸류가 나의 가치인 양 목을 뻣뻣하게 치켜세우기 십상이다. 그러한 어리석은 태도는 심지어 쉽사리 전염이 되기까지 한다.
그래서 사유의 시간이 중요하다는 생각을 한다.</description>
    </item>
    
    <item>
      <title>MySQL 이 데이터를 안준다</title>
      <link>http://jaeyo.github.io/mysql-convert-tz-timezone/</link>
      <pubDate>Fri, 05 Feb 2021 07:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/mysql-convert-tz-timezone/</guid>
      <description>팀원 중 한분으로부터 헬프 요청이 왔다. 수정 중인 코드에서 버그가 생겼는데 원인을 도무지 모르겠다는 것이었다.
상황을 대충 들어보니 아래와 같았다.
특정 쿼리가 주기적으로 실행되면서 데이터를 가져온다. 그리고 로그에는 몇 건의 데이터를 가져왔는지를 찍고 있는데, 계속해서 쿼리 결과로 가져오는 데이터가 0건이라는 것이다.
헌데 이상한 것은, 해당 쿼리를 데이터베이스 툴을 통해 직접 때려보면 2건의 데이터가 조회된다.
즉, 똑같은 쿼리를 서버의 런타임에서 날리면 0건, 데이터베이스 툴에서 직접 날리는 2건이 나오는 상황인 것이다.
처음 의심한 포인트는 쿼리가 잘못 구성되었고, 그로 인해 ORM 을 통한 object 바인딩에 실패한 것이지 않을까 하는 부분 이었다.</description>
    </item>
    
    <item>
      <title>Share Memory By Communicating</title>
      <link>http://jaeyo.github.io/share-memory-by-communicating/</link>
      <pubDate>Fri, 09 Oct 2020 17:10:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/share-memory-by-communicating/</guid>
      <description>Go 언어는 동시성 프로그래밍에 매우 특화된 언어다. 이러한 특징은 Go 언어가 탄생하게 된 유래에서도 관련이 있다. 지금은 매우 당연하게 사용되고 있는 멀티 코어 프로세서가 상용으로 세상에 나온지는 사실 생각보다 그리 오래되지 않았다. 2005 년에서 2006 년 사이에 인텔에서 상용 듀얼 코어 프로세서를 출시했다. 그리고 바로 2007년, Google 에서는 이러한 멀티 코어의 이점을 언어에서 native 레벨로 챙길 수 있는 언어로 Go 언어를 개발하기 시작하였다.
실제로 Go 언어로 멀티스레딩 코드를 만들어보면 이를 체감할 수 있다.</description>
    </item>
    
    <item>
      <title>내 나이</title>
      <link>http://jaeyo.github.io/age/</link>
      <pubDate>Sun, 27 Sep 2020 16:25:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/age/</guid>
      <description>흔히들 &amp;ldquo;쌍팔년도&amp;quot;를 1988년을 칭하는 표현으로 알고 있는 경우가 많다. 하지만 이는 사실과 다르다. &amp;ldquo;쌍팔년도&amp;quot;는 사실 단기 4288년, 즉 서기 1955년을 이르는 말이다. 이는 서로 다른 기년법에서 비롯되는 오해인 셈이다. 흔히 우리가 사용하고 있는 서기는 예수가 탄생했을 것을 추정한 해를 기원으로 하고, 단기는 단군이 고조선을 개국했다고 전해지는 해를 기원으로 하는 기년법이다. 이렇듯 우리가 자연스럽게 헤아리던 년도가 실은 특정 시점이 일어난 시기를 기점으로 세어지기 시작한 것이라는 사실을 생각하다보니 나이라는 것도 이러한 셈법의 연장선 상에 있는 것이 아닌가 하는 생각을 하게 된다.</description>
    </item>
    
    <item>
      <title>20세기 문화 이미지</title>
      <link>http://jaeyo.github.io/culture-image-of-20-century/</link>
      <pubDate>Sat, 16 May 2020 23:30:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/culture-image-of-20-century/</guid>
      <description>근래에 “20세기 문화이미지” 라는 책을 짬짬이 읽고 있다. 우연히 들른 헌책방에서 무려 2천원을 내고 업어온 책이다. 지금은 고인이 되신 이성욱 작가님이 쓰신 책으로, 서문에서는 그를 “문화기술자”라고 칭하고 있다. 이 책에 담긴 단편의 글들도 그 호칭의 연장선 상에 놓인 글들이다. 대부분 90년대 후반에 쓰여진 글들을 모아서 2004년에 책으로 묶어냈는데, 주로 당시의 생활, 문화, 세태 들을 작가의 관점에서 재미있게 풀어놓은 글들이다. 이 책이 더욱 재미있어지는 부분은 이 책을 읽는 지금이 2020년 이라는 사실이다.</description>
    </item>
    
    <item>
      <title>8년 간의 개발자 생활 회고 (3)</title>
      <link>http://jaeyo.github.io/look-back-on-8-years-3/</link>
      <pubDate>Sat, 16 May 2020 23:20:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/look-back-on-8-years-3/</guid>
      <description>8년 간의 개발자 생활 회고 (1) 8년 간의 개발자 생활 회고 (2) 8년 간의 개발자 생활 회고 (3)   SK C&amp;amp;C (2018. 7 ~ ) 새로운 시작 첫 입사날 내게 비친 풍경은 자리가 군데군데 비어있는 사무실이었다. 나중에 알고보니 여름휴가 시즌이라 길게 자리를 비우신 분들이 많았고, 내가 소속된 파트의 파트리더도 휴가중이었다. 그래서 처음 몇 일은 노트북을 지급받고 회사 시스템과 분위기를 익히는 데 썼다.
휴가를 떠났던 파트리더님이 돌아와 현재 우리 파트에 대한 설명을 들었다.</description>
    </item>
    
    <item>
      <title>8년 간의 개발자 생활 회고 (2)</title>
      <link>http://jaeyo.github.io/look-back-on-8-years-2/</link>
      <pubDate>Mon, 11 May 2020 15:53:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/look-back-on-8-years-2/</guid>
      <description>8년 간의 개발자 생활 회고 (1) 8년 간의 개발자 생활 회고 (2) 8년 간의 개발자 생활 회고 (3)   RIDI (2016. 6 ~ 2018. 3) 신입과 경력의 차이 두 번째 회사에서의 생활은 내게 굉장히 큰 변화였다. 일단 맥북을 쓰게 되었다. 그 전까지는 윈도우 환경에서 개발을 했고 맥북은 써본 일이 없었다. 그래서 일단 맥 사용법을 익히는 일부터 해야 했다. 뿐만 아니라 모든 것이 새로웠다. 첫 회사에서는 SVN 으로 소스 관리를 해왔기 때문에 Git 을 처음 사용해보게 되었고, 언어도 생경하기 짝이없는 PHP 와 Javascript 를 사용했다.</description>
    </item>
    
    <item>
      <title>8년 간의 개발자 생활 회고 (1)</title>
      <link>http://jaeyo.github.io/look-back-on-8-years-1/</link>
      <pubDate>Sun, 10 May 2020 23:23:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/look-back-on-8-years-1/</guid>
      <description>8년 간의 개발자 생활 회고 (1) 8년 간의 개발자 생활 회고 (2) 8년 간의 개발자 생활 회고 (3)   개발자의 길로 들어선 것이 어느덧 8년이다. 처음 직장 생활을 시작하던 20대 후반의 나와 지금의 내가 얼마나 달라졌는지는 사실 잘 모르겠다. 그래서 지난 8년 간의 기록을 여행기 쓰듯이 써보려고 한다. 다른 분들이 많이들 하시는 신년맞이 지난해 회고를 난 한 번도 한 적이 없으니, 8년치 회고를 한꺼번에 하는 셈이다.
 Igloosec (2013.</description>
    </item>
    
    <item>
      <title>오픈소스 프로젝트에 코드 기여한 이야기</title>
      <link>http://jaeyo.github.io/contribute-code-into-telegraf/</link>
      <pubDate>Thu, 22 Aug 2019 19:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/contribute-code-into-telegraf/</guid>
      <description>그동안 개발자로 일하면서 오픈소스의 도움을 많이 받아왔던 것 같다. 아닌게 아니라 당장 Github이 없으면 나는 현재의 생산성의 반의 반도 못 내고 있을 것이다. 하지만 부끄럽게도 작년에야 처음으로 오픈소스에 기여를 하게 되었다. 사실 기여를 하고자 하는 생각은 아주 오래전부터 가지고 있었다. 하지만 기여할 프로젝트를 고르는 문제부터 시작해서, 기존 소스코드를 파악하고, 버그의 원인을 찾고, 메인테이너와 소통하고 하는 일들이 너무 어렵게 느껴져 시도하지 못했다고 하는게 맞을 것 같다. 그러던 차에 우연찮게 처음으로 오픈소스 프로젝트에 기여하게 되었고 그 과정이 생각보다 어렵지 않다는 것을 알게 되었다.</description>
    </item>
    
    <item>
      <title>작명의 중요성</title>
      <link>http://jaeyo.github.io/naming-is-important/</link>
      <pubDate>Fri, 16 Aug 2019 01:00:08 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/naming-is-important/</guid>
      <description>개발자들 사이에서 흔히들 하는 농으로 개발하는 시간보다 변수명을 짓는 데 더 시간을 쓴다고들 한다. 변수에 이름 붙이는 게 뭐 그리 어렵겠느냐만 사실 굉장히 어렵기도 하고 또 그만큼 중요하기도 하다.
얼마전 회사 미팅에서 있었던 일이다. 내부적으로 만든 서비스 중에 Alert Manager 라는 서비스가 있었고, 해당 서비스에 이러이러한 기능을 붙이자는 의견이 나왔다. Alert Manager 에 있음직한 기능이었기 때문에 의견은 받아들여졌고, 그에 대한 논의가 지속되면서 추가하고자 하는 기능의 범위가 넓어졌다. 어느 선부터는 Alert Manager 에 있음직하지 못한, 더 넓은 개념의 기능이었기 때문에 이 기능을 Alert Manager 와 분리시켜서 별도의 서비스를 만들기로 합의했고 그 서비스에 대한 논의를 이어갔다.</description>
    </item>
    
    <item>
      <title>새로운 곳으로 이사</title>
      <link>http://jaeyo.github.io/move-to-another-place/</link>
      <pubDate>Thu, 15 Aug 2019 01:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/move-to-another-place/</guid>
      <description>약 2년간의 관악구 생활을 마치고 용인으로 이사를 가기로 했다.
애초에 이 곳으로 이사를 오게 되었던 이유는,
 아무래도 서울 안의 인프라가 더 많으니까 처가가 가까우니까  였는데, 중간에 차를 사고 나니 이런 것들이 크게 의미가 없어져버렸다. 주말이나 휴일에 항상 차를 타고 다니게 되면서 서울 안쪽 보다는 바깥쪽으로 매번 나돌았고, 사람들이 그득그득한 시내보다는 고즈넉하고 여유로운 풍경들을 즐기기 시작했다. 거기다 아무래도 차가 있으니 처가에서 좀 멀어진다고 해도 방문하기에 크게 무리가 없기도 하고.</description>
    </item>
    
    <item>
      <title>Git - branch 삭제 후 push</title>
      <link>http://jaeyo.github.io/git-delete-branch-and-push/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/git-delete-branch-and-push/</guid>
      <description>git에서 브랜치를 따서 작업을 하고 머지된 이후에는 자연스레 작업 브랜치는 날리게 된다. Github 의 풀 리퀘스트 같은 수단을 이용하게 되면 머지 이후에 Delete Branch 버튼을 통해 쉽게 remote 상의 브랜치를 제거할 수 있으나 로컬에서 바로 머지한 경우에는 로컬의 브랜치와 remote 의 브랜치를 모두 제거해주어야 한다. 헌데 로컬 브랜치 제거는 괜찮은데 remote 브랜치 제거 명령어를 항상 까먹는다.
명령어는 아래와 같다.
git branch -D branch-name # local branch 제거 git push origin :branch-name # remote branch 제거 remote 브랜치 제거 명령어를 매번 까먹어서 매번 찾아서 하다가 이걸 그냥 alias 를 걸어놔야 되겠다고 생각했다.</description>
    </item>
    
    <item>
      <title>오늘의 삽질 - 괜히 Bash 만 의심했다.</title>
      <link>http://jaeyo.github.io/bash-is-not-async/</link>
      <pubDate>Tue, 13 Aug 2019 01:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/bash-is-not-async/</guid>
      <description>회사에서 만들어놓은 쉘 스크립트가 있었다. 필요한 패키지를 다운로드받아 설치하고 설정파일을 고치고 systemctl 로 띄우는 내용의 스크립트로 대략적인 모양새는 아래와 같다.
install_blabla() { 	dest=$(mktemp /tmp/blabla_XXXX.deb) 	curl -fsSL http://blabla.com/blabla.deb -o $dest 	dpkg -i $dest 	rm -f $dest }  install_conf() { 	curl -fsSL http://blabla.com/blabla.conf -o /etc/blabla/blabla.conf 	sed -i -e &amp;#34;...&amp;#34; /etc/blabla/blabla.conf }  start_blabla() { 	systemctl start blabla }  do_install() { 	install_blabla 	install_conf 	start_blabla }  do_install 위의 스크립트에 따르면 아래의 로직을 타게 된다.</description>
    </item>
    
    <item>
      <title>연봉과 연차의 무게</title>
      <link>http://jaeyo.github.io/better-than-yesterday/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/better-than-yesterday/</guid>
      <description>&amp;ldquo;이제는 단순 개발만 하고 기능구현만 하는 것이 아니라 그 이상을 해야 할 시기가 다가온다.&amp;rdquo;
&amp;ldquo;사람들 관리가 될 수도 있고 어느 한 분야에 전문가가 되어야 할 수도 있고, 선택은 본인의 몫&amp;rdquo;
 (from https://taetaetae.github.io/2019/07/07/review-first-half-2019/)
 직장 생활을 시작한 이래로 꽤 오랫동안 해오던 생각들이다. 개발자에게 가장 기본이 되는 일은 &amp;ldquo;의도대로 동작하는 코드를 작성&amp;quot;하는 일이다. 하지만 어느 순간에는 그 이상의 플러스 알파를 해낼 수 있어야 한다.
이러한 생각을 처음 했던 것은 개발자로써 직장 생활을 막 시작했을 무렵이었다.</description>
    </item>
    
    <item>
      <title>qmk_firmware 빌드 시에 chibios 관련 에러 발생</title>
      <link>http://jaeyo.github.io/error-while-building-qmk_firmware/</link>
      <pubDate>Tue, 16 Oct 2018 10:34:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/error-while-building-qmk_firmware/</guid>
      <description>qmk_firmware는 programmable한 여러 키보드들을 지원하는 오픈소스 펌웨어다. 이 펌웨어가 지원하는 대표적인 키보드는 planck, ergodox 등이 있다. documentation 및 자세한 정보는 https://qmk.fm/ 에서 확인할 수 있다. 처음 이 소스를 clone 받아서 빌드를 하기 위해서 documentation을 보면 아래와 같이 가이드를 해준다.
$ make &amp;lt;my_keyboard&amp;gt;:&amp;lt;my_keymap&amp;gt; 하지만 그대로 따라치면 아래와 같은 에러를 볼 수 있다.
$ make ergodo_infinity:default  tmk_core/chibios.mk:38: lib/chibios-contrib/os/common/startup/ARMCMx/compilers/GCC/mk/startup_k20x7.mk: No such file or directory tmk_core/chibios.mk:40: lib/chibios/os/hal/hal.mk: No such file or directory tmk_core/chibios.mk:46: lib/chibios-contrib/os/hal/ports/KINETIS/K20x/platform.</description>
    </item>
    
    <item>
      <title>reselect</title>
      <link>http://jaeyo.github.io/reselect/</link>
      <pubDate>Sat, 06 Oct 2018 11:44:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/reselect/</guid>
      <description>https://github.com/reactjs/reselect  reselect는 redux에 붙여서 쓸 수 있는 selector 라이브러리로 역할은 아래의 두 가지로 정리된다.
 컴포넌트를 redux에 connect 시킬 때 store로부터 데이터를 꺼내와서 매핑시키는 부분 추상화 selector 함수에서 반환되는 값을 캐싱하여 성능 향상  가령 아래와 같은 코드가 있다고 가정하면,
const mapStateToProps = (state, ownProps) =&amp;gt; { 	const { contentIds } = state.userContent; 	return { 	contentIds, 	}; }; reselect를 붙여 아래와 같은 형태로 정리할 수 있다.</description>
    </item>
    
    <item>
      <title>AWS API, IP 기반으로 접근 제한하기</title>
      <link>http://jaeyo.github.io/aws-api-ip-based-access-control/</link>
      <pubDate>Tue, 30 Jan 2018 17:19:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/aws-api-ip-based-access-control/</guid>
      <description>EC2 상의 인스턴스나 로드밸런서에 특정 IP 대역만 접근 가능하도록 설정하고 싶다면 Security Group 혹은 ACL을 이용하면 된다. 하지만 그 외의 AWS에서 제공하는 API 들에 대해서 IP 기반으로 접근제한을 걸고 싶다면 Security Group, ACL 로는 불가능하다. 이 부분은 IAM의 Policy로 해결을 봐야 한다.
예를 들어, AWS System Manager의 Parameter Store에 접근해서 데이터를 읽어오는 API를 IP 기반으로 제한하고 싶다고 가정하자. 그럼 일단 Parameter Store에 대한 기본 Policy 부터 확인해보자. “AWS IAM -&amp;gt; 정책” 로 들어가서 찾아볼 수 있다.</description>
    </item>
    
    <item>
      <title>조중균의 세계를 읽었다.</title>
      <link>http://jaeyo.github.io/shame/</link>
      <pubDate>Tue, 21 Nov 2017 13:31:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/shame/</guid>
      <description>그는 “지나간 세계” 라는 시를 쓰고 또 동명의 술집에서 형수라는 친구와 함께 산다. 대학생 무렵에는 운동권에 몸담았다. 운동권 학생들이 마음에 안들었던 한 교수는 역사 시험에서 시험지에 이름만 쓰면 점수를 주겠다고 했다. 다른 친구들은 아무렇지 않게 그 시험을 받아들일 때 그는 부끄러움을 생각했다. “아무것도 하지 않음으로써 이득을 취하는 일”에 그는 동조하지 않고 시험지에는 이름과 함께 시를 썼다. 이후 회사에 다니면서도 점심을 안먹고 점심 식대를 월급에서 제하지 않는 그에게 누군가 “몰래 점심을 먹을 수도 있지 않냐”라는 의심을 하자 그는 다시 부끄럽지 않기 위해서 매일 점심을 먹지 않았다는 확인 서명을 받았다.</description>
    </item>
    
    <item>
      <title>2006년의 서울과학기술대학교 (3)</title>
      <link>http://jaeyo.github.io/snut-2006-3/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/snut-2006-3/</guid>
      <description>종종 마음이 시끄러우면 나는 학교를 찾는다. 내비에 공릉동을 찍으면 집에서 대략 한 시간 정도의 거리가 나온다. 쉽게 올만한 거리는 아니다. 그럼에도 한 번씩 사는 게 버겁게 느껴질 때면 공릉동 이곳저곳을 기웃거린다. 어릴 적 소풍 가서 보물 찾기를 하는 마음으로 공릉동 구석구석에 묻어있는 기억들을 캐낸다. 어쩐지 매번 새롭다. 이십 대의 대부분을 보낸 내게 공릉동은 왠지 고향집 같은 느낌을 준다.
오늘도 다시 찾았다. 어의관 엘리베이터 앞에 비치된 러비 12월호를 챙겨 로비 소파에 앉아 정독했다.</description>
    </item>
    
    <item>
      <title>2006년의 서울과학기술대학교 (2)</title>
      <link>http://jaeyo.github.io/snut-2006-2/</link>
      <pubDate>Tue, 24 Oct 2017 01:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/snut-2006-2/</guid>
      <description>새 학기가 시작되면 자주 보이는 모습이 있었다. 바로 교내 잔디밭에서 자장면을 시켜먹는 모습이었다. 정문 근처 잔디밭, 붕어방 근처 잔디밭, 제1학생회관 옆 잔디밭 등등 너른 땅에 잔디밭이 수도 없이 깔려 있었고 당시에는 잔디밭에 출입을 통제하지도 않았기 때문에 친구들끼리 혹은 선후배들과 동그랗게 모여 앉아 자장면을 시켜먹는 모습은 자연스러운 광경이었다. 그러다 흥이 오르면 즉석에서 막걸리 잔이 돌아갔고 얼굴에 불콰한 빛을 띤 신입생들은 수업 시간을 외면한 채 2차 장소로 향하는 선배의 뒤를 쫄래쫄래 쫓곤 했다.</description>
    </item>
    
    <item>
      <title>2006년의 서울과학기술대학교 (1)</title>
      <link>http://jaeyo.github.io/snut-2006-1/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/snut-2006-1/</guid>
      <description>오랜만에 모교인 서울과학기술대학교에 들렀다. 한밤 중이라 어두워 제대로 보이진 않았지만 못 보던 건물들이 꽤 들어서있었다. 심지어는 아직 공사 중인 곳도 있어서 포크레인이 부지 한가운데 덩그러니 서있었다. 10여 년 전에는 잔디밭이었던 곳에 번쩍번쩍 거리는 건물이 웅장하게 들어서 있었다. 귀신이 자주 출몰했다던 다빈치관은 온데간데 없어지고 대신 또 새로운 건물이 그 자리를 차지하고 있었다. 학교는 계속해서 더 나아지고 있지만 어쩐지 내 기억 속의 모습들과 조금씩 빗겨나가고 있는 것이 아쉬웠다. 그래서 2006년의 서울과학기술대학교의 모습을 늦기 전에 기억을 되새겨 남겨놓으려 한다.</description>
    </item>
    
    <item>
      <title>리디스토리 프론트엔드 개발기</title>
      <link>http://jaeyo.github.io/how-to-develop-ridistory-frontend/</link>
      <pubDate>Sun, 08 Oct 2017 14:57:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/how-to-develop-ridistory-frontend/</guid>
      <description>본 포스팅은 회사 블로그에 올려놓았던 글을 옮겨놓은 것입니다.
 몬타나 존스 라는 만화영화가 있었습니다. 1990년대 중반쯤에 방영되었던 것으로 기억이 나네요. 에피소드마다 의인화된 사자와 호랑이가 유적지를 탐험하다 제로경으로 대표되는 악의 무리와 부딪힙니다. 제로경은 니트로 박사라는 부하가 만들어준 로봇을 타고 주인공의 앞길을 막고, 쫓고 쫓기는 아슬아슬한 활극 끝에 결국 정의의 편인 주인공이 승리하곤 합니다. 여기서 제로경과 니트로 박사가 주고받는 대화가 일품입니다.
 제로경: 니트로 박사, 사정을 설명해보실까? 니트로 박사: 지금이라도 시간과 예산을 조금만 더 주신다면… 제로경: 변명은 죄악이란 걸 모르나!</description>
    </item>
    
    <item>
      <title>삶은 무지개 색이어야 한다.</title>
      <link>http://jaeyo.github.io/life-with-rainbow-colors/</link>
      <pubDate>Sat, 08 Jul 2017 06:21:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/life-with-rainbow-colors/</guid>
      <description>아침부터 찌는 듯이 덥다가도 오후가 되니 거짓말처럼 폭우가 들이닥친다. 더운 공기가 사라진 것은 다행이지 싶지만 여전히 끈덕진걸 보니 여름은 여름인 모양이다.
사실 &amp;ldquo;여름&amp;quot;이라는 단어를 곱씹고 있자면 어쩐지 그리운 느낌이 스물스물 든다. 꼬맹이 시절 방학숙제는 내팽게쳐놓고 하루종일 산으로 들로 뛰댕기던 모습들, 열대야에 잠못이룰때 티비에서 보던 공포영화 같은 것들이 생각난다. 친구들과 자전거 한 대에 둘씩 타고는 30분을 걸려 계곡으로 물놀이를 가던 장면들, 근처 실내 수영장에서 입술이 파래지도록 놀고 나온 후 수영장 옆 문구사에서 사먹었던 컵라면 같은 것들이 스쳐간다.</description>
    </item>
    
    <item>
      <title>운전을 하고 싶다</title>
      <link>http://jaeyo.github.io/drive/</link>
      <pubDate>Thu, 18 May 2017 00:31:01 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/drive/</guid>
      <description>운전을 하고 싶다. 틈 날때마다 생각한다. 참 희안한 것이, 운전면허를 따기전까지는 운전을 하고 싶다는 생각을 단 한번도 해본 적이 없다. 오히려 최대한 늦게 따야겠다고 다짐까지 했을 정도니까. 고3 수능이 끝나고 친구들이 하나 둘씩 운전면허 학원에 등록을 할때도, “저것들은 차도 없는 것들이 왜 벌써부터 면허를 따려고 하나” 생각하며 알바 하기에 바빴고, 친구들과 여행을 가면 장거리 운전으로 피곤해 하는 친구에겐 미안하지만 (빈말이다. 사실 별로 미안하지도 않았다.) 뒷자리에서 편히 쉬면서 갈 수 있음을 즐기기도 했다.</description>
    </item>
    
    <item>
      <title>mariadb multi source replication</title>
      <link>http://jaeyo.github.io/mariadb-multi-source-replication/</link>
      <pubDate>Fri, 28 Apr 2017 17:51:00 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/mariadb-multi-source-replication/</guid>
      <description>multi source replication 절차 slave가 될 mysql 인스턴스의 설정에 아래의 부분을 추가한다.
# /etc/mysql/maridb.conf.d/50-server.cnf [mysqld] server_id=19823759 # master와 겹치지 않게 replicate-ignore-db=mysql # mysql 데이터베이스는 복제하지 않음 master 데이터베이스에서 replication 용 계정 생성 후 권한을 부여한다
grant replication slave on *.* to ‘repl’@‘%’ identified by ‘!repl123’; mysqldump 를 이용해서 master가 될 데이터베이스에서 덤프를 받는다.
mysqldump --databases database_1 database_2 --single_transaction --master-data=1 -h host_path -u account -p &amp;gt; dump.sql 락이 걸리는 걸 방지하기 위해 —single-transaction 옵션 추가해야 하며, 덤프를 받은 시점의 binlog 파일과 포지션을 확인하기 위해 —master-data=1 옵션 추가한다.</description>
    </item>
    
    <item>
      <title>Too many open files</title>
      <link>http://jaeyo.github.io/too-many-open-files/</link>
      <pubDate>Tue, 25 Apr 2017 19:25:01 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/too-many-open-files/</guid>
      <description>집에서 기타치면서 놀고 있었는데 외출했던 아내가 귀가중이라는 메시지를 받았다. 집 앞 지하척 역으로 마중나가려고 핸드폰을 챙겨서 나가려는데 슬랙 메시지가 뭐가 많이 와있다. 평소 팀에서 커뮤니케이션을 슬랙으로 하기 때문에 별 생각없이 슬랙 메시지들을 확인해보고 있는데 서버쪽에 장애가 날 때 메시지가 오는 채널에 몇개의 메시지가 와있다. 순간 심장이 덜컹하며 확인해보니 몇가지 종류의 에러메시지가 꽤 여러번 발생한 형태다.
첫번째 에러는 too many open files 두번째 에러는 unable to find server blabla
두번째 에러로그는 심지어 디비서버를 못찾는다는 에러메시지!</description>
    </item>
    
    <item>
      <title>아닌 밤중에 리퀘스트가 튄다?</title>
      <link>http://jaeyo.github.io/weird-requests/</link>
      <pubDate>Tue, 25 Apr 2017 12:00:01 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/weird-requests/</guid>
      <description>신규 서비스를 오픈하면서 서버 모니터링을 위해 aws cloudwatch를 사용하게 되었다. 원래는 cloudwatch와 newrelic 을 모두 선택지에 올려놓고 마지막까지 고민을 했다. newrelic 쪽이 기능도 많고 레퍼런스도 확실했지만 일부 서버에서 agent의 설치가 안되는 문제가 있었다. 사실 agent 설치 안되는 문제야 조금 더 시간을 들여서 파보면 해결할 수 있는 문제였겠지만 당장에 서비스 오픈을 코앞에 둔 상황에서 시간적인 여유가 부족했고, cloudwatch도 우리가 필요한 기능을 대부분 제공하고 있었기 때문에 cloudwatch로 가기로 했다.
cpu, 메모리, 디스크 사용량 등의 지표를 대시보드로 구성해놓고 며칠 모니터링하고 있으려니까 좀 이상한 현상이 눈에 띄었다.</description>
    </item>
    
    <item>
      <title>겹겹의 공간들</title>
      <link>http://jaeyo.github.io/spaces/</link>
      <pubDate>Tue, 25 Apr 2017 11:00:01 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/spaces/</guid>
      <description>일상에서 우리가 기억이라고 부르는 것도 공간화한 기억이다. 프루스프가 &amp;ldquo;읽어버신 시간을 찾아서&amp;quot;에서 끊임없이 유년의 마을과 길과 집과 방들을 소환하는 까닭도, 추억이란 게 벌집 같은 공간 속에 특정의 시간들을 압축-공간화하고 있기 때문이다. 바슐라르가 &amp;ldquo;공감의 시학&amp;quot;에서 한 말처럼 &amp;ldquo;기억을 생생하게 하는 것은 시간이 아니라 공간이다. 우리들이 오랜 머무름에 의해 구체화된 지속의 아름다운 화석들을 발견하는 것은, 공간에 의해서, 공간 가운데서인 것이다&amp;rdquo;
 그러고보니, 추억이라는 것들을 하나둘씩 들여다보면 시간과 사람들, 그때 했던 생각이나 가졌던 감정들, 표정과 분위기같은 것들은 희끄무레하니 기억이 잘 나지 않는 반면에 공간만큼은 선명하게 기억이 난다.</description>
    </item>
    
    <item>
      <title>이직 면접 이야기</title>
      <link>http://jaeyo.github.io/job-interview/</link>
      <pubDate>Thu, 25 Aug 2016 14:40:55 +0000</pubDate>
      
      <guid>http://jaeyo.github.io/job-interview/</guid>
      <description>직장인이 이직 면접을 준비하면서 받는 스트레스가 이혼을 할 때 받는 스트레스와 비슷하다는 이야기를 들은 적이 있다. 글쎄, 내 경우에 비추어보면 조금 과장되다 싶게 느껴지는 이야기긴 하지만, 그만치 감당해야 할 부담이 상당하다는 점에서는 공감을 하게 된다. 면접이 거듭될 때마다 자존감이 손바닥 위 모래처럼 사그러들고, 나는 지금까지 뭐하고 살아왔나 하는 인생 전반에 대한 후회를 하게 되는 것이, 이거 오래 준비하다간 내 명에 못살지 싶었다. 회사 입장에서는 심플하게 충원하려는 자리에 맞지 않아서 퇴짜를 놓았다지만 지원자는 난 역시 이 정도밖에 안되는 인간인가 하는 자괴감을 느끼게 되는 것이다.</description>
    </item>
    
  </channel>
</rss>
