{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/reselect/","webpackCompilationHash":"86c5b697d966d4c6f5d2","result":{"data":{"site":{"siteMetadata":{"title":"Hello, there","author":"Jaeyo"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/contribute-code-into-telegraf/"},"frontmatter":{"title":"오픈소스 프로젝트에 코드 기여한 이야기","tags":["tech","open source","telegraf"]}}},{"node":{"fields":{"slug":"/naming-is-important/"},"frontmatter":{"title":"작명의 중요성","tags":["daily"]}}},{"node":{"fields":{"slug":"/move-to-another-place/"},"frontmatter":{"title":"새로운 곳으로 이사","tags":["daily"]}}},{"node":{"fields":{"slug":"/git-delete-branch-and-push/"},"frontmatter":{"title":"Git - branch 삭제 후 push","tags":["tech","git"]}}},{"node":{"fields":{"slug":"/bash-is-not-async/"},"frontmatter":{"title":"오늘의 삽질 - 괜히 Bash 만 의심했다.","tags":["tech","trouble shooting"]}}},{"node":{"fields":{"slug":"/better-than-yesterday/"},"frontmatter":{"title":"연봉과 연차의 무게","tags":["tech","career"]}}},{"node":{"fields":{"slug":"/error-while-building-qmk_firmware/"},"frontmatter":{"title":"qmk_firmware 빌드 시에 chibios 관련 에러 발생","tags":["tech","keyboard"]}}},{"node":{"fields":{"slug":"/reselect/"},"frontmatter":{"title":"reselect","tags":["tech"]}}},{"node":{"fields":{"slug":"/aws-api-ip-based-access-control/"},"frontmatter":{"title":"AWS API, IP 기반으로 접근 제한하기","tags":["tech","aws"]}}},{"node":{"fields":{"slug":"/shame/"},"frontmatter":{"title":"조중균의 세계를 읽었다.","tags":["daily"]}}},{"node":{"fields":{"slug":"/snut-2006-3/"},"frontmatter":{"title":"2006년의 서울과학기술대학교 (3)","tags":["daily"]}}},{"node":{"fields":{"slug":"/snut-2006-2/"},"frontmatter":{"title":"2006년의 서울과학기술대학교 (2)","tags":["daily"]}}},{"node":{"fields":{"slug":"/snut-2006-1/"},"frontmatter":{"title":"2006년의 서울과학기술대학교 (1)","tags":["daily"]}}},{"node":{"fields":{"slug":"/how-to-develop-ridistory-frontend/"},"frontmatter":{"title":"리디스토리 프론트엔드 개발기","tags":["tech","react"]}}},{"node":{"fields":{"slug":"/life-with-rainbow-colors/"},"frontmatter":{"title":"삶은 무지개 색이어야 한다.","tags":["daily"]}}},{"node":{"fields":{"slug":"/drive/"},"frontmatter":{"title":"운전을 하고 싶다","tags":["daily"]}}},{"node":{"fields":{"slug":"/mariadb-multi-source-replication/"},"frontmatter":{"title":"mariadb multi source replication","tags":["tech","mariadb"]}}},{"node":{"fields":{"slug":"/too-many-open-files/"},"frontmatter":{"title":"Too many open files","tags":["tech","trouble shooting"]}}},{"node":{"fields":{"slug":"/weird-requests/"},"frontmatter":{"title":"아닌 밤중에 리퀘스트가 튄다?","tags":["tech","trouble shooting"]}}},{"node":{"fields":{"slug":"/spaces/"},"frontmatter":{"title":"겹겹의 공간들","tags":["daily"]}}},{"node":{"fields":{"slug":"/job-interview/"},"frontmatter":{"title":"이직 면접 이야기","tags":["career"]}}}]},"markdownRemark":{"id":"10b99b6d-89bd-5961-b044-05103c44e9f7","excerpt":"https://github.com/reactjs/reselect reselect는 redux에 붙여서 쓸 수 있는 selector 라이브러리로 역할은 아래의 두 가지로 정리된다. 컴포넌트를 redux에 connect 시킬 때 store…","html":"<ul>\n<li><a href=\"reselect\">https://github.com/reactjs/reselect</a></li>\n</ul>\n<p>reselect는 redux에 붙여서 쓸 수 있는 selector 라이브러리로 역할은 아래의 두 가지로 정리된다.</p>\n<ol>\n<li>컴포넌트를 redux에 connect 시킬 때 store로부터 데이터를 꺼내와서 매핑시키는 부분 추상화</li>\n<li>selector 함수에서 반환되는 값을 캐싱하여 성능 향상</li>\n</ol>\n<p>가령 아래와 같은 코드가 있다고 가정하면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> contentIds <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>userContent<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tcontentIds<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>reselect를 붙여 아래와 같은 형태로 정리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// selector</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserContent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>userContent<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> selectUserContentIds <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">[</span> getUserContent <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// input selector</span>\n\t<span class=\"token parameter\">userContent</span> <span class=\"token operator\">=></span> userContent<span class=\"token punctuation\">.</span>contentIds\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tcontentIds<span class=\"token punctuation\">:</span> <span class=\"token function\">selectUserContentIds</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러한 형태에서 먼저 눈에 띄는 장점은 컴포넌트 단에서 redux store의 구조를 알 필요없이 selector 만 호출할 수 있다는 점이다.\n이외에도 reselect는 memoized selector 를 통해서 성능 향상을 꾀할 수 있다.</p>\n<p>여기서 주의할 점은, 만약 리스트 형태의 컴포넌트에서 selector를 사용할 경우 각 리스트 아이템마다 필요로 하는 데이터가 다르게 되기 떄문에 정상적으로 memoized 되지 않는다는 점이다. 이 경우에는 selector를 생성하는 로직을 함수로 한번 래핑하여 각 리스트 아이템들마다 다른 selector를 사용하도록 해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// selector</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserContent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>favoriteContent<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectTitleByContentId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> contentId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">[</span> getUserContent <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token parameter\">userContent</span> <span class=\"token operator\">=></span> userContent<span class=\"token punctuation\">.</span>titles<span class=\"token punctuation\">[</span>contentId<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// list item component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\ttitle<span class=\"token punctuation\">:</span> <span class=\"token function\">selectTitleByContentId</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> ownProps<span class=\"token punctuation\">.</span>contentId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>reselect의 또다른 특징으로는 composable 하다는 점이다.\n아래의 경우처럼 미리 만들어놓은 selector가 다른 selector의 input selector가 될 수 있어 selector들을 조합하는 것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// selector</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUserContent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>userContent<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getEntities</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> selectUserContentIds <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">[</span> getUserContent <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// input selector</span>\n\t<span class=\"token parameter\">userContent</span> <span class=\"token operator\">=></span> userContent<span class=\"token punctuation\">.</span>contentIds\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> selectUserContents <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">[</span> selectUserContentIds<span class=\"token punctuation\">,</span> getEntities <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token parameter\">userContentIds<span class=\"token punctuation\">,</span> entities</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> userContentIds<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">contentId</span> <span class=\"token operator\">=></span> entities<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">[</span>contentId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tcontents<span class=\"token punctuation\">:</span> <span class=\"token function\">selectUserContents</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/reselect/"},"frontmatter":{"title":"reselect","date":"October 06, 2018","description":null,"tags":["tech"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"next":{"fields":{"slug":"/error-while-building-qmk_firmware/"},"frontmatter":{"title":"qmk_firmware 빌드 시에 chibios 관련 에러 발생"}},"previous":{"fields":{"slug":"/aws-api-ip-based-access-control/"},"frontmatter":{"title":"AWS API, IP 기반으로 접근 제한하기"}},"slug":"/reselect/"}}}